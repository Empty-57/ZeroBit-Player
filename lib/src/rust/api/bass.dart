// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `bass_init`, `chan_free`, `fade_in`, `fade_out`, `get_len`, `get_pos`, `get_state`, `get_volume`, `get_wasapi_info`, `listen_progress`, `load`, `on_end_sync`, `or_err_`, `pause`, `play_file`, `resume`, `set_all_eq_params`, `set_eq_params`, `set_exclusive_mode`, `set_pos`, `set_speed`, `set_sync`, `set_volume`, `stop`, `stream_free`, `toggle`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `BassApi`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `drop`

Future<void> loadLib() => RustLib.instance.api.crateApiBassLoadLib();

Future<void> initBass() => RustLib.instance.api.crateApiBassInitBass();

Stream<int> audioEventStream() =>
    RustLib.instance.api.crateApiBassAudioEventStream();

Stream<double> progressListen() =>
    RustLib.instance.api.crateApiBassProgressListen();

Future<void> setExclusiveMode({required bool exclusive}) =>
    RustLib.instance.api.crateApiBassSetExclusiveMode(exclusive: exclusive);

Future<void> playFile({required String path}) =>
    RustLib.instance.api.crateApiBassPlayFile(path: path);

Future<void> resume() => RustLib.instance.api.crateApiBassResume();

Future<void> pause() => RustLib.instance.api.crateApiBassPause();

Future<void> stop() => RustLib.instance.api.crateApiBassStop();

Future<double> getLen() => RustLib.instance.api.crateApiBassGetLen();

Future<double> getPosition() => RustLib.instance.api.crateApiBassGetPosition();

Future<void> setPosition({required double pos}) =>
    RustLib.instance.api.crateApiBassSetPosition(pos: pos);

Future<void> toggle() => RustLib.instance.api.crateApiBassToggle();

Future<double> getVolume() => RustLib.instance.api.crateApiBassGetVolume();

Future<void> setVolume({required double vol}) =>
    RustLib.instance.api.crateApiBassSetVolume(vol: vol);

Future<void> setSpeed({required double speed}) =>
    RustLib.instance.api.crateApiBassSetSpeed(speed: speed);

Future<void> setEqParams({required int freCenterIndex, required double gain}) =>
    RustLib.instance.api.crateApiBassSetEqParams(
      freCenterIndex: freCenterIndex,
      gain: gain,
    );
